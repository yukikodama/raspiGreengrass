AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      #Type: AllAtOnce
      Role: !Ref CodeDeployRole

Resources:
  DynamoDBTableRequest:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Request
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: RequestType
          AttributeType: S
      KeySchema:
        -
          AttributeName: RequestType
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  DynamoDBTableSensor:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Sensor
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: SensorId
          AttributeType: S
      KeySchema:
        -
          AttributeName: SensorId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  DynamoDBTableCF:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cfRoomSensor
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: SensorId
          AttributeType: S
        -
          AttributeName: UpdateAt
          AttributeType: N
      KeySchema:
        -
          AttributeName: SensorId
          KeyType: HASH
        -
          AttributeName: UpdateAt
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  DynamoDBTablePirSensor:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PirSensor
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: SensorId
          AttributeType: S
        -
          AttributeName: UpdateAt
          AttributeType: N
      KeySchema:
        -
          AttributeName: SensorId
          KeyType: HASH
        -
          AttributeName: UpdateAt
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  RaspiGreengrass:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/raspiGreengrass.handler
      #AutoPublishAlias: raspiGreengrass
      FunctionName: RaspiGreengrass
      Runtime: nodejs8.10
      Description: '(yuki-kodama Lambda node.js) RaspiGreengrass Lambda in Node.js.'
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          ALIASES: GrovePiLongInterval
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  MyPirSensor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/myPirSensor.handler
      #AutoPublishAlias: myPirSensor
      FunctionName: myPirSensor
      Runtime: nodejs8.10
      Description: '(yuki-kodama Lambda node.js) myPirSensor Lambda in Node.js.'
      MemorySize: 128
      Timeout: 60
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
  ConferenceRoomSensor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/conferenceRoomSensor.handler
      #AutoPublishAlias: conferenceRoomSensor
      FunctionName: conferenceRoomSensor
      Runtime: nodejs8.10
      Description: '(yuki-kodama Lambda node.js) conferenceRoomSensor Lambda in Node.js.'
      MemorySize: 128
      Timeout: 60
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
  AWSGetPirSensorAPI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      # FunctionName: AWSGetPirSensorAPI
      Runtime: nodejs10.x
      Description: '(yuki-kodama Lambda node.js) AWSGetPirSensorAPI Lambda in Node.js.'
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: PirSensor
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /pir
            Method: get

  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        -  arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        -  arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        -  arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        -  arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'