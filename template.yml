AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      #Type: AllAtOnce
      Role: !Ref CodeDeployRole

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PirSensor
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: SensorId
          AttributeType: S
      KeySchema:
        -
          AttributeName: SensorId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  HelloGreengrass:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      AutoPublishAlias: HelloGreengrass
      FunctionName: HelloGreengrass
      Runtime: nodejs8.10
      Description: '(yuki-kodama Lambda node.js) HelloGreengrass Lambda in Node.js.'
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          ALIASES: HelloGreengrass
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn

  RaspiGreengrass:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/raspiGreengrass.handler
      AutoPublishAlias: GrovePiLongInterval
      FunctionName: RaspiGreengrass
      Runtime: nodejs8.10
      Description: '(yuki-kodama Lambda node.js) RaspiGreengrass Lambda in Node.js.'
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          ALIASES: GrovePiLongInterval
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  MySensor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/mySensor.handler
      AutoPublishAlias: MySensor
      FunctionName: MySensor
      Runtime: nodejs8.10
      Description: '(yuki-kodama Lambda node.js) MySensor Lambda in Node.js.'
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          ALIASES: MySensor
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
  AWSGetPirSensorAPI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/api/index.handler
      AutoPublishAlias: PirSensor
      FunctionName: AWSGetPirSensorAPI
      Runtime: nodejs8.10
      Description: '(yuki-kodama Lambda node.js) AWSGetPirSensorAPI Lambda in Node.js.'
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME: PirSensor
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        -  arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        -  arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        -  arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        -  arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'